@inject AlertBoxService _alertBoxService;

@if (currentContent is not null)
{
    <div class="alert alert-@currentContent.Value.BootstrapTheme">
        <button @onclick="OnButtonClick" class="btn btn-@currentContent.Value.BootstrapTheme me-2">
            @currentContent.Value.ButtonText
        </button>
        @currentContent.Value.AlertText
    </div>
}

@code {
    AlertBoxContent? currentContent;

    const int miliSecondsTimeout = 3000;

    protected override void OnInitialized()
    {
        _alertBoxService.OnContentSet += OnAlertBoxContentSet;
    }

    async Task OnAlertBoxContentSet(AlertBoxContent content)
    {
        if (timerTask is not null)
        {
            await ClearCurrentContent();
        }

        currentContent = content;

        await InvokeAsync(StateHasChanged);

        tokenSource = new();
        timerTask = Task.Run(async () =>
        {
            await Task.Delay(miliSecondsTimeout, tokenSource.Token);
            await ClearCurrentContent();
        });
    }

    async Task ClearCurrentContent()
    {
        currentContent = null;
        await InvokeAsync(StateHasChanged);

        tokenSource.Cancel();
    }

    async Task OnButtonClick()
    {
        if (currentContent is null)
        {
            return;
        }

        await currentContent.Value.OnButtonClick();
        await ClearCurrentContent();
    }

    CancellationTokenSource tokenSource = new();

    Task? timerTask;
}