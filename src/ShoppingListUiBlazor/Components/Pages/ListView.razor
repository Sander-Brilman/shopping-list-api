@page "/lijst/bekijken/{name}/{ListId:guid}";

@inject ItemRepository _itemRepository;
@inject LiveUpdateService _liveUpdateService;
@inject AlertBoxService _alertBoxService;

@using ShoppingListUIBlazor.Components.Shared
@using ShoppingListUIBlazor.Components.Shared.AlertBox
@using ShoppingListUIBlazor.Utilities;

<h1>Lijst @(Name):</h1>


@if (items is null)
{
    <h2>aan het laden.. </h2>
} 
else if (items.Count is 0)
{
    <EmptyListView ListId="ListId" />
} 
else
{
    <h2 class="h4 mb-3 text-secondary">Met nog @(DateTime.UtcNow.DaysUnilChristmas()) dagen tot kerst!!</h2>

    <SearchBox 
        OnFocusIn="_ => hideTopList = true"
        OnFocusOut="_ => hideTopList = false"

        OnSubmit="AddSearchAsItem"

        @bind-SearchValue:get="searchValue"
        @bind-SearchValue:set="OnSearch"
    >
        <i class="bi bi-cart-plus"></i>
    </SearchBox>

    <div class="active-items @(hideTopList ? "hidden" : "")">
        @foreach(ShoppingItemResponse item in items.Where(i => i.IsChecked == true))
        {
            <ShoppingItem OnToggle="OnItemToggle" Item="item"></ShoppingItem>
        }
    </div>

    <hr class="w-100 my-4" />

    @foreach (var item in bottomItems)
    {
        <ShoppingItem OnToggle="OnItemToggle" Item="item"></ShoppingItem>
    }

    @if (searchValue != "" && bottomItems.Count == 0)
    {
        <p class="my-2 lead">
            "@searchValue" bestaat niet, wat een blunder.<br>
            maar niet gevreesd! Je kunt het
            <button class="no-style border-0 bg-white link-primary" @onclick="AddSearchAsItem">toevoegen</button>
            als je wilt. 
        </p>
    }

    <hr class="my-4" />

    <a href="/lijst/item-verwijderen/@Name/@ListId" class="btn btn-danger mb-3 me-3">
        <i class="bi bi-trash"></i>
        Item verwijderen :(
    </a>
}

<a href="/" class="btn btn-primary mb-3">
    <i class="bi bi-arrow-left"></i>
    Terug naar overzicht
</a>

@code {
    [Parameter]
    public Guid ListId { get; set; }

    [Parameter]
    public required string Name { get; set; }

    List<ShoppingItemResponse>? items;
    List<ShoppingItemResponse> bottomItems = [];

    string searchValue = "";

    bool hideTopList = false;



    void OnItemToggle(ShoppingItemResponse item)
    {
        searchValue = "";
        hideTopList = false;
        ResetBottomList();
    }

    async Task FetchItemsForList()
    {
        items = await _itemRepository.GetAllInList(ListId);
        ResetBottomList();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchItemsForList();
    }

    protected override void OnInitialized()
    {
        _liveUpdateService.OnItemAdded += OnExternalNewItem;
        _liveUpdateService.OnItemToggled += OnExternalToggle;
        _liveUpdateService.OnItemDeleted += OnExternalDelete;
        _liveUpdateService.OnReconnecting += OnReconnect;
    }

    async Task OnReconnect()
    {
        items = null;
        await InvokeAsync(StateHasChanged);

        await FetchItemsForList();
        await _alertBoxService.SetContentAsync(new()
            {
                AlertText = "Opnieuw verbonden met de server",
                BootstrapTheme = "warning",
                ButtonText = "Sluiten",
                OnButtonClick = () => { return Task.CompletedTask; }
            });
    }

    async Task OnExternalDelete(Guid itemId)
    {
        ShoppingItemResponse? item = items?.Find(i => i.Id == itemId);

        if (item is not null)
        {
            items?.Remove(item);
        }

        ResetBottomList();
        await InvokeAsync(StateHasChanged);
    }

    async Task OnExternalToggle(Guid id, bool isChecked)
    {
        if (items is null)
        {
            return;
        }

        ShoppingItemResponse? item = items.Find(i => i.Id == id);

        if (item is null)
        {
            return;
        }

        item.IsChecked = isChecked;

        ResetBottomList();
        await InvokeAsync(StateHasChanged);
    }

    async Task OnExternalNewItem(ShoppingItemResponse newItem, Guid listId)
    {
        if (items is null || listId != ListId)
        {
            return;
        }

        if (items.Any(i => i.Id == newItem.Id))
        {
            return;// item is already added to the list
        }

        items?.Add(newItem);

        ResetBottomList();
        await InvokeAsync(StateHasChanged);
    }


    # region search
    void OnSearch(string input)
    {
        hideTopList = true;
        searchValue = input;
        ProcessSearch();
    }

    void ProcessSearch()
    {
        if (searchValue == "")
        {
            ResetBottomList();
            return;
        }

        bottomItems = items!.Search(searchValue);

        StateHasChanged();
    }

    async Task AddSearchAsItem()
    {
        if (items!.Any(i => i.Name == searchValue))
        {
            await _alertBoxService.SetContentAsync(new AlertBoxContent
                {
                    AlertText = "Dit item bestaat al..",
                    BootstrapTheme = "info",
                    ButtonText = "Sluiten",
                    OnButtonClick = () => Task.CompletedTask
                });

            return;
        }

        if (searchValue == "")
        {
            return;
        }

        await _itemRepository.CreateFromContent(searchValue!, ListId);
        searchValue = "";
        hideTopList = false;

    }
    #endregion

    void ResetBottomList()
    {
        if (items is null) { return; }

        bottomItems = items
            .Where(i => i.IsChecked is false)
            .OrderByDescending(i => i.TimesUsed)
            .ToList();
    }
}
