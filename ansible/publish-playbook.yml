
- name: create shopping_list_api user
  hosts: all
  become: true
  tasks:
    - name: create shopping_list_api group
      group:
        name: shopping_list_api
        state: present

    - name: create shopping_list_api user 
      user:
        name: shopping_list_api
        comment: user for running the shoppinglist api docker compose
        create_home: yes # we will place the app here!
        groups: shopping_list_api,docker
        state: present
        shell: /usr/sbin/nologin
        password: '!'

    - name: set permissions of app home
      file: 
        path: "/home/shopping_list_api/"
        state: directory
        owner: shopping_list_api
        group: restic
        mode: '0650'      


- name: build the docker container
  hosts: localhost
  tasks:
    - name: remove existing .tar
      file:
        path: ../shopping-list-api-container.tar
        state: absent

    - name: build docker image
      command: docker compose build
      args:
        chdir: ../

    - name: Save Docker image to tarball
      command: docker save shopping-list-api:latest -o shopping-list-api-container.tar
      args:
        chdir: ../


- name: Install and run app on remote server
  hosts: all
  become: true
  tasks:
    - name: Create postgres-data directory
      file: 
        path: /home/shopping_list_api/postgres-data
        state: directory
        owner: shopping_list_api
        group: restic
        mode: '0644'

    - name: Copy Docker files
      copy:
        src: "./../{{ item.src }}"
        dest: "/home/shopping_list_api/{{ item.dest }}"
        owner: shopping_list_api
        group: restic
        mode: '0644'
        force: true
      loop:
        - { src: shopping-list-api-container.tar, dest: shopping-list-api-container.tar }
        - { src: docker-compose.yml, dest: docker-compose.yml }
        - { src: .env.production, dest: .env }


    # 
    # This is a hack that # dynamically adds the "user: XXX:XXX" statement to the compose to run the project as the dedicated shopping_list_api user
    # this is done to improve isolation between running apps 
    #
    - name: Get UID of shopping_list_api
      command: id -u shopping_list_api
      register: user_id_result

    - name: Get GID of shopping_list_api
      command: id -g shopping_list_api
      register: group_id_result

    - name: Inject user directive into docker-compose.yml
      replace:
        path: /home/shopping_list_api/docker-compose.yml
        regexp: 'image:shopping_list_api'
        replace: 'user: "{{ user_id_result.stdout }}:{{ group_id_result.stdout }}"\n    image:'



    - name: Stop running containers
      command: sudo docker compose down 
      args:
        chdir: /home/shopping_list_api

    - name: Load image into Docker
      command: docker load -i ./shopping-list-api-container.tar
      args:
        chdir: /home/shopping_list_api

    - name: Start container
      command: sudo docker-compose up -d 
      args:
        chdir: /home/shopping_list_api




# - name: setup reverse proxy
# # copy over shoppinglistapi.caddyfile
# # restart caddy service

# - name: specify backup paths

